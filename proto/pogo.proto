syntax="proto3";

package pogobuf;

//import "google/protobuf/timestamp.proto";

message Unit {
}


message Id {
    int64 idx = 1;
}

/* Bitmap */
enum TaskState {
    dummy1 = 0;
    TODO = 1;
    DONE = 2;
}

/* Bitmap */
enum TaskType {
    dummy2 = 0;
    TASK = 1;
    BREAK = 2;
}

message Task {
    Id id = 1;
    string title = 2;
    string category = 3;
    TaskState state = 4;
    TaskType type = 5;
}

/* Bitmap */
enum TaskFields {
    dummy3 = 0;
    id = 1;
    title = 2;
    category = 4;
    state = 8;
    type = 16;
}

message TaskFilter {
    Task task = 1;
    TaskFields fields = 2;
}

/* Server does: filtering
 * Client does: rendering
 */
service Tasks {
    rpc Add (Task) returns (Unit) { }
    rpc List (TaskFilter) returns (stream Task) { }
    rpc Start (Id) returns (Unit) { }
    rpc Stop (Unit) returns (Unit) { }
    rpc Complete (Id) returns (Unit) { }
}


message DateRange {
    //google.protobuf.Timestamp start = 1;
    //google.protobuf.Timestamp end = 2;
}

message Report { /* TODO */ }

service Reports {
    rpc Get(DateRange) returns (Report) { }
}


message Status {
    enum SystemState {
        IDLE = 0;
        TASK = 1;
        BREAK = 2;
    }
    SystemState state = 1;
    Task task = 2;
    uint32 remainingTime = 3;
}

service Pogo {
    // TODO: how does kubectl do watches? Is this where we should
    // "WatchState"?
    rpc GetStatus (Unit) returns (Status) { }
}
